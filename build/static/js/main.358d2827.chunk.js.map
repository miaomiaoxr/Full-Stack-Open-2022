{"version":3,"sources":["services/NetWork.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/SuccessNotification.js","components/ErrorNotification.js","App.js","index.js"],"names":["url","NetWork","getAll","axios","get","create","newObject","post","update","id","put","remove","delete","Filter","setFilterKey","placeholder","onChange","event","target","value","PersonForm","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setMessage","onSubmit","preventDefault","map","person","name","toLowerCase","includes","setTimeout","parseInt","Math","random","number","then","response","concat","data","type","Persons","filterKey","style","listStyleType","padding","filter","display","onClick","window","confirm","deleteId","catch","error","deleteElement","toString","SuccessNotification","message","className","ErrorNotification","App","useState","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.358d2827.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst url = \"/api/persons\"\r\n\r\nconst getAll = () => axios.get(url)\r\n\r\nconst create = newObject => axios.post(url,newObject)\r\n\r\nconst update = (id,newObject) => axios.put(`${url}/${id}`,newObject)\r\n\r\nconst remove = id => axios.delete(`${url}/${id}`)\r\n\r\nconst NetWork = {getAll,create,update,remove}\r\n\r\nexport default NetWork","import React from \"react\"\r\n\r\nconst Filter = ({ setFilterKey }) => {\r\n\r\n    const handleFilterWordChange = (event) => setFilterKey(event.target.value)\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                filter show with <input placeholder = \"Input a name to find one\" onChange={handleFilterWordChange} />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import NetWork from \"../services/NetWork\"\r\n\r\nconst PersonForm = ({ persons, setPersons, newName, setNewName, newNumber, setNewNumber,  setMessage }) => {\r\n\r\n    // const numberRenew = (newName, newNumber) => {//making changes to the phone numbers ON BACKEND\r\n    //     let newObject = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase())[0]\r\n    //     newObject = { ...newObject, number: newNumber }\r\n    //     let newPersons = persons.filter(person => person.id !== newObject.id)\r\n    //     newPersons.splice(newObject.id-1,0,newObject)\r\n    //     console.log(newPersons)\r\n    //     setPersons(newPersons)\r\n    //     NetWork.update(newObject.id, newObject)\r\n    // }\r\n\r\n    const addName = (event) => {\r\n        event.preventDefault()\r\n        if (!persons.map(person => person.name.toLowerCase()).includes(newName.toLowerCase())) {\r\n            setMessage(`Added ${newName}`)\r\n            setTimeout(() => {setMessage(null)}, 3000);\r\n\r\n            const newObject = {\r\n                name: newName,\r\n                id: parseInt(10000*Math.random(),10),\r\n                number: newNumber,\r\n            }\r\n            NetWork\r\n                .create(newObject)\r\n                .then(response => setPersons(persons.concat(response.data)))\r\n        }\r\n        else {/*TODO: making changes to the phone numbers ON BACKEND */\r\n            // if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`))\r\n            //     numberRenew(newName, newNumber)\r\n            setMessage(`${newName} is already added to phonebook`)\r\n            setTimeout(()=>{setMessage(null)},3000)\r\n        }\r\n        setNewName(\"\")\r\n        setNewNumber(\"\")\r\n    }\r\n\r\n    const handleNameChange = (event) => setNewName(event.target.value)\r\n    const handleNumChange = (event) => setNewNumber(event.target.value)\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={addName}>\r\n                <div>\r\n                    name: <input value={newName} placeholder=\"input a name\" onChange={handleNameChange} />\r\n                </div>\r\n                <div>\r\n                    number:<input value={newNumber} placeholder=\"input a phone number\" onChange={handleNumChange} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import NetWork from '../services/NetWork'\r\n\r\n\r\nconst Persons = ({ persons, filterKey, setPersons, setMessage }) => {\r\n\r\n    const deleteElement = (persons, deleteId, name) => {\r\n        NetWork.remove(deleteId)\r\n            .catch(error => {\r\n                setMessage(`Information of ${name} has already been removed from this server`)\r\n                setTimeout(() => { setMessage(null) }, 3000)\r\n            })\r\n        setPersons(persons.filter(person => person.id !== deleteId))\r\n        setMessage(`Information of ${name} is deleted`)\r\n        setTimeout(() => { setMessage(null) }, 3000)\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <ul style={{ listStyleType: \"none\", padding: '0' }} > {/*different keywords from CSS*/}\r\n                {persons\r\n                    .filter((person) => {\r\n                        return person\r\n                            .name\r\n                            .toLowerCase().includes(filterKey.toLowerCase())\r\n                    })\r\n                    .map(person => {\r\n                        return (<div key={person.id.toString().concat('div')} style={{ display: 'flex' }}>\r\n                            <li key={person.id}>\r\n                                {person.name} {person.number}\r\n                            </li>\r\n                            <button key={person.id.toString().concat('button')} onClick={() => window.confirm(`Delete ${person.name} ?`) ? deleteElement(persons, person.id, person.name) : \"\"}>delete</button>\r\n                        </div>)\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","const SuccessNotification = ({message}) =>{\r\n    if (message === null) {\r\n        return null\r\n      }\r\n    \r\n      return (\r\n        <div className=\"success\">\r\n          {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuccessNotification","const ErrorNotification = ({message}) =>{\r\n    if (message === null) {\r\n        return null\r\n      }\r\n    \r\n      return (\r\n        <div className=\"error\">\r\n          {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorNotification","import React, { useState, useEffect } from 'react'\nimport NetWork from './services/NetWork'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport SuccessNotification from './components/SuccessNotification'\nimport ErrorNotification from './components/ErrorNotification'\n\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState(\"\")\n  const [newNumber, setNewNumber] = useState(\"\")\n  const [filterKey, setFilterKey] = useState(\"\")\n  const [successMessage,setSuccessMessage] = useState(null)\n  const [errorMessage,setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    NetWork\n      .getAll()\n      .then(response => setPersons(response.data))\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter setFilterKey={setFilterKey} />\n      <h3>Add a new</h3>\n      <SuccessNotification message = {successMessage} />\n      <PersonForm persons={persons} setPersons={setPersons} newNumber={newNumber} setNewNumber={setNewNumber} setNewName={setNewName} newName={newName} setMessage = {setSuccessMessage}/>\n      <h3>Numbers</h3>\n      <ErrorNotification message = {errorMessage} />\n      <Persons persons={persons} filterKey={filterKey} setPersons={setPersons} setMessage = {setErrorMessage}/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}